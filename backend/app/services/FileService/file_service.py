import logging
import subprocess
from enum import Enum
from pathlib import Path

from pypdf import PdfReader

from ...util import log


class FileServiceDirectories(str, Enum):
    LOCAL_TEMPLATE_DIRECTORY = "templates"
    LOCAL_USER_FILES_DIRECTORY = "uploaded"
    LOCAL_GENERATED_FILES_DIRECTORY = "generated"


class FileService:
    def __init__(self, local_file_directory: str = "/") -> None:
        self.logger = logging.getLogger(__name__)
        # Base Local File Directory
        self.local_file_directory_base = Path(local_file_directory)

        # Template Directory
        self.local_template_directory = (
            self.local_file_directory_base / FileServiceDirectories.LOCAL_TEMPLATE_DIRECTORY
        )

        # User Uploaded Files Directory
        self.local_user_files_directory = (
            self.local_file_directory_base / FileServiceDirectories.LOCAL_USER_FILES_DIRECTORY
        )

        # Generated Files Directory
        self.local_generated_files_directory = (
            self.local_file_directory_base / FileServiceDirectories.LOCAL_GENERATED_FILES_DIRECTORY
        )

    @log
    def get_text_from_pdf(self, user_id: str, file_name: str) -> str:
        file_name = file_name if file_name.endswith(".pdf") else f"{file_name}.pdf"

        reader = PdfReader(self.local_user_files_directory / user_id / file_name)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
        return text

    @log
    def get_latex_from_file(
        self, sub_directory: FileServiceDirectories, template_id: str, user_id: str = ""
    ) -> str:
        file_name = f"{template_id}.tex"
        file_path = self.local_file_directory_base / sub_directory / user_id / template_id / file_name

        with Path(file_path).open("r") as file:
            return file.read()

    @log
    def write_latex_to_file(
        self,
        sub_directory: FileServiceDirectories,
        latex_text: str,
        template_id: str,
        user_id: str = "",
    ) -> None:
        file_name = f"{template_id}.tex"
        file_path = self.local_file_directory_base / sub_directory / user_id / template_id / file_name
        file_path.parent.mkdir(parents=True, exist_ok=True)

        with Path(file_path).open("w") as file:
            file.write(latex_text)

        return file_name

    @log
    def make_pdf_from_latex(
        self,
        sub_directory: FileServiceDirectories,
        template_id: str,
        user_id: str = "",
    ) -> str:
        latex_file_name = f"{template_id}.tex"
        latex_file_path = (
            self.local_file_directory_base / sub_directory / user_id / template_id / latex_file_name
        )

        # Run latexmk to generate the PDF
        try:
            subprocess.run(
                ["latexmk", "-pdf", "-silent", latex_file_path.name],
                check=True,
                cwd=latex_file_path.parent,
            )
            return f"Successfully created PDF from latex file: {latex_file_name}"
        except subprocess.CalledProcessError as e:
            print(f"An error occurred while generating the PDF: {e}")
        finally:
            # Remove all additional files generated by latexmk
            subprocess.run(["latexmk", "-c"], cwd=latex_file_path.parent, check=False)
